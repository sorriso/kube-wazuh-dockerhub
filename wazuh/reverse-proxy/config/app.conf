map $ssl_client_fingerprint $reject {
    default 1;
    2BF61Dxxxxxxxxxxxx 0;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
}

server {

    listen 80;
    server_name wazuh.kube.local;

    #######################################################
    # Managing SSO AUTHENTICATION
    #######################################################
#
#    auth_request /auth;
#    error_page 401 = @error401;
#    location @error401 {
#        return 302 https://login.sso.com;
#    }
#
#    location = /auth {
#        internal;
#        proxy_pass https://api.sso.com;
#        proxy_pass_request_body     off;
#
#        proxy_set_header Content-Length "";
#        proxy_set_header X-Original-URI $request_uri;
#        proxy_set_header Host $http_host;
#        proxy_set_header X-Real-IP $remote_addr;
#        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header X-Forwarded-Proto $scheme;
#
#        if ($http_cookie ~* "sso_token=([^;]+)(?:;|$)") {
#            set $token "$1";
#        }
#        proxy_set_header X-SSO-Token $token;
#    }


    #######################################################
    # Managing Client certificat authorization
    #######################################################

    # CA certificate for mutual TLS
#   ssl_client_certificate /etc/pki/tls/certs/ca-bundle.crt;

    # need to validate client certificate(if this flag optional it won't
    # validate client certificates)  on | off | optional | optional_no_ca

#   ssl_verify_client optional;
#   if ($reject) { return 403; }


    #######################################################
    # Managing HTTPS / TLS - EXTERNAL SIDE
    # https://ssl-config.mozilla.org/
    #######################################################

    # Enable TLS and HTTP2
    # change -> listen     8090 ssl http2;

    # set application certificat
#   ssl_certificate           /etc/nginx/ssl/cert-ext.pem;
#   ssl_certificate_key       /etc/nginx/ssl/cert-ext.key;

    # Disable SSL and old TLS versions
#   ssl_protocols             TLSv1.2 TLSv1.3;

    # set Diffie-Hellman key exchange
#   ssl_dhparam               /etc/nginx/ssl/airflow-ext.dh;

    # Optimise cipher suites
#   ssl_prefer_server_ciphers on;
#   ssl_ciphers               ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:!ADH:!AECDH:!MD5;

    # Enable OCSP stapling
#   ssl_stapling on;
#   ssl_stapling_verify on;
    # verify chain of trust of OCSP response using Root CA and Intermediate certs
#   ssl_trusted_certificate /etc/pki/tls/certs/ca-bundle.crt;

    # Enable HSTS
#   add_header Strict-Transport-Security "max-age=63072000" always;

    # Optimise SSL session cache
#   ssl_session_cache      shared:SSL:10m;
#   ssl_session_timeout    10m;

    # Disable session tickets
    # Necessary for Perfect Forward Secrecy (PFS)
#   ssl_session_tickets    off;


    #######################################################
    # Managing PROXY
    #######################################################

    proxy_send_timeout      120;
    proxy_read_timeout      300;
    proxy_buffering         off;
    proxy_request_buffering off;
    keepalive_timeout       5 5;
    tcp_nodelay             on;
    # allow large uploads of files - refer to nginx documentation
    client_max_body_size 2G;
    # optimize downloading files larger than 1G - refer to nginx doc before adjusting
    # proxy_max_temp_file_size 2G;

    #######################################################
    # Managing HTTPS / TLS - INTERNAL SIDE
    #######################################################

#    proxy_ssl_certificate         /etc/nginx/ssl/cert-int.pem;
#    proxy_ssl_certificate_key     /etc/nginx/ssl/cert-int.key;
#    proxy_ssl_trusted_certificate /etc/nginx/ssl/ca.pem;
#    proxy_ssl_verify              on;
#    proxy_ssl_verify_depth        3;
#    proxy_ssl_session_reuse       on;
#    proxy_ssl_protocols           TLSv1.2 TLSv1.3;
#    proxy_ssl_ciphers             HIGH:!aNULL:!MD5;


    location / {

        #######################################################
        # Managing Application
        #######################################################

        proxy_pass https://dashboard-service:8443/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    }

}
