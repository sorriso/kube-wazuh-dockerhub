# custom KUBE nginx config

user nginx;

# worker_processes: Cette directive contrôle le nombre de travailleurs dans Nginx.
# La valeur de cette directive est définie sur auto pour permettre à Nginx de déterminer
# le nombre de cœurs disponibles, les disques, la charge du serveur et le sous-système réseau.
# Cependant, vous pouvez découvrir le nombre de cœurs en exécutant la commande lscpu sur le terminal.
worker_processes    auto;

# worker_rlimit_nofile: Cette directive est en quelque sorte liée à worker_connections.
# Afin de gérer une grande connexion simultanée, nous la définissons sur une valeur élevée.
# Also set
# /etc/security/limits.conf
#   web soft nofile 65535
#   web hard nofile 65535
# /etc/default/nginx
#       ULIMIT="-n 65535"
worker_rlimit_nofile 65535;

# Chemin vers le fichier PID de nginx
# pid /run/nginx.pid;

events {

  worker_connections  1024;

  # multi_accept:  Cette directive permet à un travailleur d'accepter plusieurs connexions
  # dans la file d'attente à la fois. Une file d'attente dans ce contexte signifie simplement
  # une séquence d'objets de données en attente de traitement.
  multi_accept        on;

  # use: Cette directive spécifie la méthode pour traiter une connexion à partir du client.
  # Dans ce tutoriel, nous avons décidé de définir la valeur sur epoll parce que nous travaillons
  # sur un Ubuntu Plate-forme. le epoll est la méthode de traitement la plus efficace pour les plates-formes Linux.
  use                 epoll;

  # epoll_events:  La valeur de cette directive spécifie le nombre d'événements que Nginx transférera vers le noyau.
  epoll_events        512;
}

http {

  # Utilisation de la primitive sendfile() du kernel
  # C'est un appel système pour le transfert des données entre le disque et la pile TCP.
  # L'utilisation de cette primitive accroît les performances car les données sont
  # manipulées directement via le kernel.
  #
  # https://www.kernel.org/doc/man-pages/online/pages/man2/sendfile.2.html
  sendfile on;

  # keepalive_timeout: Gardez les connexions actives pendant environ 30 secondes. La valeur par défaut est de 75 secondes.
  keepalive_timeout  30s;

  # keepalive_requests: Configurez un certain nombre de demandes pour qu'elles restent
  # actives pendant une période de temps spécifique. Vous pouvez définir le nombre de demandes sur 20 ou 30.
  keepalive_requests 30;

  # send_timeout: Définissez un délai d'expiration pour la transmission des données au client.
  send_timeout      30s;

  # Désactivation de l'affichage du numéro de version dans les headers HTTP et sur les pages d'erreur.
  server_tokens off;

  # Type MIME par défaut quand aucun type n'a été spécifié
  default_type application/octet-stream;

  # On inclut la liste des "type MIME"
  include mime.types;

  # Chemins vers les fichiers de logs
  access_log    /var/log/nginx/access.log combined;
  error_log     /var/log/nginx/error.log warn;

  # gzip:  Si vous souhaitez activer la compression, définissez la valeur de cette
  # directive sur on. Par défaut, c'est désactivé
  gzip off;

  # gzip_http_version:  Cette directive vous permet de choisir la version HTTP minimale d'une requête
  # pour une réponse compressée. Vous pouvez utiliser la valeur par défaut qui est 1.1
  gzip_http_version 1.1;

  # gzip_comp_level:  Vous pouvez utiliser cette directive pour définir le niveau de compression.
  # Afin de ne pas gaspiller les ressources du processeur, vous n'avez pas besoin de définir un niveau
  # de compression trop élevé. Entre 1 et 9, vous pouvez régler le niveau de compression sur 2 or 3.
  gzip_comp_level 5;

  # gzip_min_length:  Définissez la longueur de réponse minimale pour la compression via le
  # content-length response header field. Vous pouvez le définir sur plus de 20 octets.
  gzip_min_length  1000;

  gzip_buffers 4 8k;
  gzip_proxied any;

  # gzip_types: Cette directive vous permet de choisir le type de réponse que vous souhaitez compresser.
  # Par défaut, le type de réponse text/html est toujours compressé. Vous pouvez ajouter un autre type de
  # réponse tel que text/css comme indiqué dans le code ci-dessus.
  gzip_types
    text/css
    text/javascript
    text/xml
    text/plain
    text/x-component
    application/javascript
    application/x-javascript
    application/json
    application/xml
    application/rss+xml
    application/vnd.ms-fontobject
    font/truetype
    font/opentype
    image/svg+xml;

  # gzip_disabled:  Certains navigateurs tels que Internet Explorer 6 je n'ai pas de support pour gzip compression.
  # Cette directive utilise User-Agent champ d'en-tête de demande pour désactiver la compression pour certains navigateurs.
  gzip_disable "MSIE [1-6]\.";

  # gzip_vary:  Quand gzip directive est activée, cette directive ajoute le champ d'en-tête Vary:Accept Encoding  à la réponse.
  gzip_vary on;

  # Inclusion des fichiers de configuration personnalisés http
  include /etc/nginx/nginx.d/*.conf;

}

# Inclusion des fichiers de configuration personnalisés tcp
# include /etc/nginx/stream/*.conf;
